model = dict(
type='ImageClassifier',
backbone=dict(type='MobileNetV3', arch='large'),






neck=dict(type='GlobalAveragePooling'),
head=dict(
type='StackedLinearClsHead',
num_classes=3,
in_channels=960,
mid_channels=[1280],
dropout_rate=0.2,
act_cfg=dict(type='HSwish'),
loss=dict(type='CrossEntropyLoss', loss_weight=1.0),
topk=1,
cal_acc=True))
dataset_type = 'ImageNet'
img_norm_cfg = dict(
mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
dict(type='LoadImageFromFile'),
dict(type='RandomResizedCrop', scale=(0.8, 1.0), size=300),
dict(type='RandomFlip', flip_prob=0.8, direction='horizontal'),
dict(type='RandomErasing'),
dict(type='Albu', transforms=[dict(type='ColorJitter')]),
dict(
type='Normalize',
mean=[123.675, 116.28, 103.53],
std=[58.395, 57.12, 57.375],
to_rgb=True),
dict(type='ImageToTensor', keys=['img']),
dict(type='ToTensor', keys=['gt_label']),
dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
dict(type='LoadImageFromFile'),
dict(type='Resize', size=(200, -1)),
dict(type='CenterCrop', crop_size=250),
dict(
type='Normalize',
mean=[123.675, 116.28, 103.53],
std=[58.395, 57.12, 57.375],
to_rgb=True),
dict(type='ImageToTensor', keys=['img']),
dict(type='Collect', keys=['img'])
]
data = dict(
samples_per_gpu=32,
workers_per_gpu=2,
train=dict(
type='ImageNet',
data_prefix=
'/home/ies/ott/pseVNC/ProjektDirectory/dataAugTest2/data/training',
pipeline=[
dict(type='LoadImageFromFile'),
dict(type='RandomResizedCrop', scale=(0.8, 1.0), size=224),
dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
dict(type='RandomErasing'),
dict(type='Albu', transforms=[dict(type='ColorJitter')]),
dict(
type='Normalize',
mean=[123.675, 116.28, 103.53],
std=[58.395, 57.12, 57.375],
to_rgb=True),
dict(type='ImageToTensor', keys=['img']),
dict(type='ToTensor', keys=['gt_label']),
dict(type='Collect', keys=['img', 'gt_label'])
]),
val=dict(
type='ImageNet',
data_prefix=
'/home/ies/ott/pseVNC/ProjektDirectory/dataAugTest2/data/validation',
pipeline=[
dict(type='LoadImageFromFile'),
dict(type='Resize', size=(280, -1)),
dict(type='CenterCrop', crop_size=250),
dict(
type='Normalize',
mean=[123.675, 116.28, 103.53],
std=[58.395, 57.12, 57.375],
to_rgb=True),
dict(type='ImageToTensor', keys=['img']),
dict(type='Collect', keys=['img'])
]),
test=dict(
type='ImageNet',
data_prefix=
'/home/ies/ott/pseVNC/ProjektDirectory/dataAugTest2/data/validation',
pipeline=[
dict(type='LoadImageFromFile'),
dict(type='Resize', size=(280, -1)),
dict(type='CenterCrop', crop_size=250),
dict(
type='Normalize',
mean=[123.675, 116.28, 103.53],
std=[58.395, 57.12, 57.375],
to_rgb=True),
dict(type='ImageToTensor', keys=['img']),
dict(type='Collect', keys=['img'])
]))
evaluation = dict(interval=100, metric=['accuracy', 'support'])
albu_transforms = [dict(type='ColorJitter')]
optimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=[200])
runner = dict(type='IterBasedRunner', max_iters=400)
checkpoint_config = dict(interval=100)
log_config = dict(
interval=10,
hooks=[dict(type='TextLoggerHook'),
dict(type='TensorboardLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = '/home/ies/ott/pseMMCWithConda/anaconda2/envs/envPython39/mmclassification/checkpoints/mobilenet_v3_large-3ea3c186.pth'
resume_from = None
workflow = [('train', 1)]
work_dir = '/home/ies/ott/pseVNC/ProjektDirectory/dataAugTest2/working_directory/MobilNetTest_1'
gpu_ids = range(0, 1)
